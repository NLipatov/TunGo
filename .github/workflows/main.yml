name: tungo-workflow
on:
  push:
    branches:
      - main
    paths:
      - 'src/**'   # Only if src directory files changed
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'   # Only if src directory files changed
      
jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Get repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.x'

      - name: Install dependencies
        run: |
          cd src
          go mod tidy

      - name: Run tests with coverage
        run: |
          cd src
          sudo go test -coverprofile=coverage.txt ./...
          
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: src/coverage.txt
          flags: unittests
          fail_ci_if_error: true

  version-and-tag:
    runs-on: ubuntu-latest
    needs: run-tests
    if: github.event_name == 'push' # Prevents this job from running in PR. It will only run on push to main.
    steps:
      - name: Get repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9
        with:
          versionSpec: '5.x'

      - name: Generate Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9

      - name: Tag and Push Version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag $(echo ${{ steps.gitversion.outputs.semver }})
          git push origin $(echo ${{ steps.gitversion.outputs.semver }})

  build-image:
    runs-on: ubuntu-latest
    needs: version-and-tag
    if: github.event_name == 'push' # Prevents this job from running in PR. It will only run on push to main.
    steps:
      - name: Get repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'recursive'
  
      - name: Get Version from Git
        id: get_version
        run: echo "VERSION=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
  
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.x'
  
      - name: Install dependencies
        run: |
          cd src
          go mod tidy
  
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
  
      - name: Build and Tag Docker Image
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          docker build -t nlipatov/tungo:${VERSION} src
          docker tag nlipatov/tungo:${VERSION} nlipatov/tungo:latest

      - name: Push Docker Images
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          docker push nlipatov/tungo:${VERSION}
          docker push nlipatov/tungo:latest

  redeploy:
    runs-on: ubuntu-latest
    needs: build-image
    if: github.event_name == 'push' # Prevents this job from running in PR. It will only run on push to main.
    steps:
      - name: Redeploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd tungo
            sudo docker compose pull
            sudo docker compose up -d --remove-orphans --force-recreate
            sudo docker system prune -f

  build-binaries:
    runs-on: ubuntu-latest
    needs: version-and-tag
    if: github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.x'

      - name: Build Linux binary
        run: |
          cd src
          go build -o ../tungo

      - name: Upload binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: tungo
          path: tungo

  create-release:
    runs-on: ubuntu-latest
    needs: build-binaries
    if: github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: tungo

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.gitversion.outputs.semver }}
          release_name: Release ${{ steps.gitversion.outputs.semver }}
          body: "Release generated by CI"
          draft: false
          prerelease: false

      - name: Upload Linux binary to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: tungo
          asset_name: tungo
          asset_content_type: application/octet-stream
