name: Release Workflow

on:
  workflow_dispatch:
    
env:
  GO_VERSION: '1.25.0'
  GOTOOLCHAIN: 'local'
  
jobs:
  version-and-tag:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.get_tag.outputs.tag_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get the latest git tag
        id: get_tag
        run: echo "tag_name=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT

  build-linux:
    needs: version-and-tag
    runs-on: ubuntu-latest
    env:
     VER: ${{ needs.version-and-tag.outputs.tag_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build Linux amd64 binary
        run: |
          cd src
          go mod tidy
          go build -ldflags="-s -w -X tungo/presentation/runners/version.VersionTag=${VER}" \
            -o ../tungo-linux-amd64

      - name: Upload Linux binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: tungo-linux-amd64
          path: tungo-linux-amd64

  build-macos:
    needs: version-and-tag
    runs-on: macos-latest
    env:
     VER: ${{ needs.version-and-tag.outputs.tag_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
  
      - name: Build darwin-amd64
        run: |
          cd src
          go mod tidy
          GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w -X tungo/presentation/runners/version.VersionTag=${VER}" \
            -o ../tungo-darwin-amd64
  
      - name: Upload darwin-amd64
        uses: actions/upload-artifact@v4
        with:
          name: darwin-amd64
          path: tungo-darwin-amd64
  
      - name: Build darwin-arm64
        run: |
          cd src
          go mod tidy
          GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w -X tungo/presentation/runners/version.VersionTag=${VER}" \
            -o ../tungo-darwin-arm64
  
      - name: Upload darwin-arm64
        uses: actions/upload-artifact@v4
        with:
          name: darwin-arm64
          path: tungo-darwin-arm64

  build-windows:
    needs: version-and-tag
    runs-on: windows-latest
    env:
     VER: ${{ needs.version-and-tag.outputs.tag_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build Windows x64 binary
        run: |
          cd src
          go mod tidy
          go build -ldflags="-s -w -X tungo/presentation/runners/version.VersionTag=$env:VER" -o ../tungo-windows-x64.exe .

      - name: Create RunWithAdmin.ps1
        run: |
          @'
          Start-Process "$PSScriptRoot\tungo-windows-x64.exe" -ArgumentList "c" -Verb RunAs
          '@ | Out-File RunWithAdmin.ps1 -Encoding utf8

      - name: Install Inno Setup via Chocolatey
        run: choco install innosetup -y

      - name: Download wintun archive
        run: |
          Invoke-WebRequest -Uri "https://www.wintun.net/builds/wintun-0.14.1.zip" -OutFile "wintun.zip"
          Expand-Archive -Path "wintun.zip" -DestinationPath "wintun"
          Copy-Item -Path "wintun\wintun\bin\amd64\wintun.dll" -Destination "."

      - name: Download TunGo.ico
        run: Invoke-WebRequest -Uri "https://tungo.ethacore.com/img/favicon.ico" -OutFile "TunGo.ico"

      - name: Create Inno Setup Script
        run: |
          @"
          [Setup]
          AppName=TunGo
          AppVersion=$env:VER
          DefaultDirName={pf}\TunGo
          DefaultGroupName=TunGo
          OutputBaseFilename=tungo-windows-x64
          PrivilegesRequired=admin
          ArchitecturesAllowed=x64
          ArchitecturesInstallIn64BitMode=x64
          AppId={{54554E47-4F00-0000-0000-000000000000}}
          Uninstallable=yes
          UninstallDisplayName=TunGo $env:VER
          UninstallDisplayIcon={app}\TunGo.ico

          [Files]
          Source: "wintun.dll"; Flags: dontcopy
          Source: "tungo-windows-x64.exe"; DestDir: "{app}"; Flags: ignoreversion
          Source: "TunGo.ico"; DestDir: "{app}"; Flags: ignoreversion
        
          [Icons]
          Name: "{group}\TunGo"; \
            Filename: "{app}\tungo-windows-x64.exe"; \
            IconFilename: "{app}\TunGo.ico"; \
            WorkingDir: "{app}"

          [Code]
          function InitializeSetup(): Boolean;
          var
            Uninstaller, Params: string;
            ResultCode: Integer;
          begin
            Result := True;
            Uninstaller := ExpandConstant('{pf}\TunGo\unins000.exe');
            if FileExists(Uninstaller) then begin
              Params := '/VERYSILENT /SUPPRESSMSGBOXES /NORESTART';
              Exec(Uninstaller, Params, '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
            end;
          end;
    
          procedure CopyWintunDll;
          var
            sysDir, targetFile, tempFile: string;
          begin
            sysDir := ExpandConstant('{sys}');
            targetFile := sysDir + '\wintun.dll';
            if not FileExists(targetFile) then begin
              ExtractTemporaryFile('wintun.dll');
            tempFile := ExpandConstant('{tmp}\wintun.dll');
            if not FileCopy(tempFile, targetFile, False) then
              MsgBox('Failed to copy wintun.dll to ' + sysDir, mbError, MB_OK);
            end;
          end;

          procedure CurStepChanged(CurStep: TSetupStep);
          begin
          if CurStep = ssPostInstall then
          CopyWintunDll;
          end;
          "@ | Out-File setup.iss -Encoding utf8

      - name: Build installer with Inno Setup
        run: ISCC.exe setup.iss

      - name: Upload Windows installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: tungo-windows-x64
          path: Output/tungo-windows-x64.exe
          
  build-docker-image:
    runs-on: ubuntu-latest
    needs: version-and-tag
    steps:
      - name: Get repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Get Version from Git
        id: get_version
        run: echo "VERSION=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install dependencies
        run: |
          cd src
          go mod tidy

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Tag Docker Image
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          docker build -t nlipatov/tungo:${VERSION} src
          docker tag nlipatov/tungo:${VERSION} nlipatov/tungo:latest

      - name: Push Docker Images
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          docker push nlipatov/tungo:${VERSION}
          docker push nlipatov/tungo:latest

  create-release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos, build-windows, version-and-tag]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Linux binary artifact
        uses: actions/download-artifact@v4
        with:
          name: tungo-linux-amd64
          path: linux

      - name: Download darwin-amd64 artifact
        uses: actions/download-artifact@v4
        with:
          name: darwin-amd64
          path: darwin

      - name: Download darwin-arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: darwin-arm64
          path: darwin-arm64

      - name: Download Windows installer artifact
        uses: actions/download-artifact@v4
        with:
          name: tungo-windows-x64
          path: win

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.version-and-tag.outputs.tag_name }}
          release_name: Release ${{ needs.version-and-tag.outputs.tag_name }}
          body: "Release generated by CI"
          draft: false
          prerelease: false

      - name: Upload Linux x64 binary to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: linux/tungo-linux-amd64
          asset_name: tungo-linux-amd64
          asset_content_type: application/octet-stream
          
      - name: Upload darwin-amd64 to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: darwin/tungo-darwin-amd64
          asset_name: tungo-darwin-amd64
          asset_content_type: application/octet-stream

      - name: Upload darwin-arm64 to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: darwin-arm64/tungo-darwin-arm64
          asset_name: tungo-darwin-arm64
          asset_content_type: application/octet-stream

      - name: Upload Windows x64 installer to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: win/tungo-windows-x64.exe
          asset_name: tungo-windows-x64.exe
          asset_content_type: application/octet-stream
