name: e2e-tungo-tailscale
on:
  workflow_dispatch:

env:
  # Tunnel address of the server inside the /24 used by TunGo
  SERVER_TUN_IP: 10.0.0.1

jobs:
  e2e:
    runs-on: ubuntu-latest
    steps:
      - name: ensure TAILSCALE_KEY (Reusable + Ephemeral)
        run: |
          if [ -z "${{ secrets.TAILSCALE_KEY }}" ]; then
            echo "::error::TAILSCALE_KEY is missing. Create a Reusable + Ephemeral auth key in Tailscale."; exit 1;
          fi

      - name: Install Tailscale
        run: curl -fsSL https://tailscale.com/install.sh | sh

      - name: Tailscale up
        run: |
          sudo tailscale up \
            --authkey "${{ secrets.TAILSCALE_KEY }}" \
            --hostname tungo-ci-combined \
            --timeout 30s
          tailscale status || true
          tailscale ip -4

      - name: Get this runner's Tailscale IPv4
        id: tsip
        run: echo "ts_ip=$(tailscale ip -4 | head -n1)" >> $GITHUB_OUTPUT

      - name: Download TunGo (Linux amd64)
        run: |
          curl -L "https://github.com/NLipatov/TunGo/releases/latest/download/tungo-linux-amd64" -o tungo
          chmod +x tungo
          sudo mv tungo /usr/local/bin/tungo
          which tungo && tungo --version || true

      # --- Prepare configs ---
      - name: Generate client config and set ConnectionIP to TS-IP
        run: |
          sudo apt-get update -y >/dev/null && sudo apt-get install -y jq >/dev/null
          # Generate client config (stdout) → file
          sudo tungo s gen > client_linux.json
          # Patch ConnectionIP (both TCP/UDP) to this runner's Tailscale IP
          jq --arg ip "${{ steps.tsip.outputs.ts_ip }}" \
             '.TCPSettings.ConnectionIP=$ip | .UDPSettings.ConnectionIP=$ip' \
             client_linux.json > client_linux.json.tmp && mv client_linux.json.tmp client_linux.json
          echo "Patched ConnectionIP to ${{ steps.tsip.outputs.ts_ip }}"
          head -n 40 client_linux.json || true
          # Put client config to default location
          sudo mkdir -p /etc/tungo
          sudo cp client_linux.json /etc/tungo/client_configuration.json
          ls -l /etc/tungo

      # --- Start server & client in the SAME job ---
      - name: Start server (sudo tungo s)
        run: |
          sudo tungo s > server.log 2>&1 &
          # wait until UDP 9090 is listening (adjust if you use another port)
          for i in {1..15}; do
            sudo ss -lun | grep -q ':9090' && break; sleep 1;
          done
          sudo ss -lun | grep -q ':9090' || (echo "UDP 9090 not listening"; cat server.log || true; exit 1)
          pgrep -a tungo || (echo "server not running"; cat server.log || true; exit 1)

      - name: UDP 9090 traffic (best-effort)
        run: |
          sudo apt-get update -y >/dev/null && sudo apt-get install -y tcpdump >/dev/null
          sudo tcpdump -i any udp port 9090 -w udp9090.pcap -G 20 -W 1 >/dev/null 2>&1 &
          echo $! > tcpdump.pid

      - name: Start client (sudo tungo c)
        run: |
          sudo tungo c > client.log 2>&1 &
          # Give it a moment to establish session
          for i in {1..12}; do
            pgrep -a tungo >/dev/null && break; sleep 1;
          done
          pgrep -a tungo || (echo "client not started"; cat client.log || true; exit 1)

      # --- Sanity checks: tunnel up and traffic flows ---
      - name: tunnel interface/route exist
        run: |
          ip addr show | grep -E 'udptun0|tcptun0' || ip route | grep -E '10\.0\.0\.0/24' || {
            echo "Expected TunGo interface or route not found"; echo "--- client.log ---"; cat client.log || true; echo "--- server.log ---"; cat server.log || true; exit 1;
          }

      - name: ping server tunnel IP
        run: |
          ping -c 3 "${SERVER_TUN_IP}" || {
            echo "Ping to ${SERVER_TUN_IP} failed — adjust SERVER_TUN_IP if needed.";
            echo "--- client.log ---"; cat client.log || true; echo "--- server.log ---"; cat server.log || true; exit 1;
          }

      # --- Cleanup capture & upload diagnostics on failure ---
      - name: Stop capture (best-effort)
        if: always()
        run: |
          [ -f tcpdump.pid ] && sudo kill "$(cat tcpdump.pid)" || true

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: |
            server.log
            client.log
            udp9090.pcap
