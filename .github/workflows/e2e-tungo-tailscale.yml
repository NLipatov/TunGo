name: e2e-tungo-tailscale
on:
  workflow_dispatch:

env:
  # Tunnel address of the server inside the /24 used by TunGo
  SERVER_TUN_IP: 10.0.0.1

jobs:
  server:
    runs-on: ubuntu-latest
    outputs:
      ts_ip: ${{ steps.tsip.outputs.ts_ip }}
    steps:
      - name:
        run: |
          if [ -z "${{ secrets.TAILSCALE_KEY }}" ]; then
            echo "::error::TAILSCALE_KEY secret is missing or not accessible."; exit 1;
          fi

      - name: Install Tailscale
        run: curl -fsSL https://tailscale.com/install.sh | sh

      - name: Tailscale up (ephemeral)
        run: |
          sudo tailscale up \
            --authkey "${{ secrets.TAILSCALE_KEY }}" \
            --hostname tungo-ci-server \
            --accept-routes \
            --timeout 30s

      - name: Get server Tailscale IPv4
        id: tsip
        run: echo "ts_ip=$(tailscale ip -4 | head -n1)" >> $GITHUB_OUTPUT

      - name: Download TunGo (Linux amd64)
        run: |
          curl -L "https://github.com/NLipatov/TunGo/releases/latest/download/tungo-linux-amd64" -o tungo
          chmod +x tungo
          sudo mv tungo /usr/local/bin/tungo
          which tungo && tungo --version || true

      - name: Generate client config and set ConnectionIP to server TS-IP
        run: |
          sudo apt-get update -y >/dev/null && sudo apt-get install -y jq >/dev/null
          # Generate client configuration (stdout) → file
          sudo tungo s gen > client_linux.json
          # Patch ConnectionIP to server's TS address for both TCP and UDP sections
          jq --arg ip "${{ steps.tsip.outputs.ts_ip }}" \
             '.TCPSettings.ConnectionIP=$ip | .UDPSettings.ConnectionIP=$ip' \
             client_linux.json > client_linux.json.tmp && mv client_linux.json.tmp client_linux.json
          echo "Patched ConnectionIP to ${{ steps.tsip.outputs.ts_ip }}"
          head -n 40 client_linux.json || true

      - name: Upload client config (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: client-config-linux
          path: client_linux.json

      - name: Start server (sudo tungo s)
        run: |
          sudo tungo s &
          sleep 3
          pgrep -a tungo || (echo "server not started" && exit 1)
          # Optional quick UDP port probe (adjust if your server listens elsewhere)
          sudo ss -lun | grep -E ':9090' || true

  client:
    needs: server
    runs-on: ubuntu-latest
    steps:
      - name: Preflight: ensure TAILSCALE_KEY is present
        run: |
          if [ -z "${{ secrets.TAILSCALE_KEY }}" ]; then
            echo "::error::TAILSCALE_KEY secret is missing or not accessible."; exit 1;
          fi

      - name: Install Tailscale
        run: curl -fsSL https://tailscale.com/install.sh | sh

      - name: Tailscale up (ephemeral)
        run: |
          sudo tailscale up \
            --authkey "${{ secrets.TAILSCALE_KEY }}" \
            --hostname tungo-ci-client \
            --accept-routes \
            --timeout 30s

      - name: Download TunGo (Linux amd64)
        run: |
          curl -L "https://github.com/NLipatov/TunGo/releases/latest/download/tungo-linux-amd64" -o tungo
          chmod +x tungo
          sudo mv tungo /usr/local/bin/tungo
          which tungo && tungo --version || true

      - name: Download client config (artifact)
        uses: actions/download-artifact@v4
        with:
          name: client-config-linux
          path: .

      - name: Install client config to /etc/tungo
        run: |
          sudo mkdir -p /etc/tungo
          sudo mv client_linux.json /etc/tungo/client_configuration.json
          ls -l /etc/tungo
          # Show which server IP is configured (for debug)
          command -v jq >/dev/null || (sudo apt-get update -y && sudo apt-get install -y jq -y)
          jq '.UDPSettings.ConnectionIP, .TCPSettings.ConnectionIP' /etc/tungo/client_configuration.json || true

      - name: Start client (sudo tungo c)
        run: |
          sudo tungo c &
          sleep 5
          pgrep -a tungo || (echo "client not started" && exit 1)

      - name: Sanity: tunnel interface and route exist
        run: |
          echo "Interfaces:"
          ip addr show | sed -n '1,200p'
          echo "Routes:"
          ip route show table main | sed -n '1,200p'
          # Accept either udptun0/tcptun0 presence or a 10.0.0.0/24 route (generator-dependent)
          ip addr show | grep -E 'udptun0|tcptun0' || ip route | grep -E '10\.0\.0\.0/24' || {
            echo "Expected TunGo interface or route not found"; exit 1;
          }

      - name: Sanity: ping server tunnel IP
        run: |
          ping -c 3 "${SERVER_TUN_IP}" || {
            echo "Ping to ${SERVER_TUN_IP} failed — adjust SERVER_TUN_IP if your generator uses another address."; exit 1;
          }
